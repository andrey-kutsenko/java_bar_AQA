package ua.stqa.aqa.addressbook.tests;// Generated by Selenium IDE

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.thoughtworks.xstream.XStream;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import ua.stqa.aqa.addressbook.model.GroupData;
import ua.stqa.aqa.addressbook.model.Groups;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.MatcherAssert.assertThat;

public class GroupCreationTests extends TestBase {



  @DataProvider
  public Iterator<Object[]> validGroupsFromXml() throws IOException {
    //List<Object[]> list=new ArrayList<Object[]>();
    try(BufferedReader reader=new BufferedReader(new FileReader(new File("src/test/resources/groups.xml")))){
      String xml="";
      String line=reader.readLine();
      while (line!=null){
        xml+=line;
        //String[]split=line.split(";");
        //list.add(new Object[]{new GroupData().withName(split[0]).withHeader(split[1]).withFooter(split[2])});
        line=reader.readLine();
      }
      XStream xstream=new XStream();
      xstream.processAnnotations(GroupData.class);
      List<GroupData>groups=(List<GroupData>) xstream.fromXML(xml);
      return groups.stream().map((g)->new Object[]{g}).collect(Collectors.toList()).iterator();
    }
    //return list.iterator();
  }
  @DataProvider
  public Iterator<Object[]> validGroupsFromJson() throws IOException {
    try(BufferedReader reader=new BufferedReader(new FileReader(new File("src/test/resources/groups.json")))){
      String json="";
      String line=reader.readLine();
      while (line!=null){
        json+=line;
        line=reader.readLine();
      }
      Gson gson=new Gson();
      List<GroupData>groups=gson.fromJson(json,new TypeToken<List<GroupData>>(){}.getType());
      return groups.stream().map((g)->new Object[]{g}).collect(Collectors.toList()).iterator();
    }
  }
  @Test(dataProvider = "validGroupsFromJson")
  public void testGroupCreation(GroupData group) {

    //GroupData group=new GroupData().withName(name).withHeader(header).withFooter(footer);
    app.goTo().groupPage();
    Groups before=app.group().all();
    //Set<GroupData> before=app.group().all();
    //int before=app.getGroupHelper().getGroupCount();
    //GroupData group = new GroupData().withName("test2");
    app.group().create(group);
    assertThat(app.group().count(),equalTo(before.size()+1));
    Set<GroupData> after=app.group().all();
    //int after=app.getGroupHelper().getGroupCount();
    System.out.println(before.size());
    System.out.println(after.size());
    //Assert.assertEquals(after.size(),before.size()+1);

    /*
    int max=0;
    for(GroupData g:after) {
      if (g.getId() > max)
        max = g.getId();
    }
    Comparator<? super GroupData> byId= (Comparator<GroupData>) (o1, o2) -> Integer.compare(o1.getId(),o2.getId());
    group.setId(after.stream().max((o1, o2) -> Integer.compare(o1.getId(),o2.getId())).get().getId()); */

    //group.withId(after.stream().mapToInt((g)->g.getId()).max().getAsInt());
    //before.add(group);
   /* Comparator<? super GroupData> byId=(g1,g2)->Integer.compare(g1.getId(), g2.getId());
    before.sort(byId);
    after.sort(byId);*/

    //Assert.assertEquals(before,after);
    assertThat(after, equalTo(before.withAdded(group.withId(after.stream()
            .mapToInt((g)->g.getId()).max().getAsInt()))));

  }
  @Test(enabled = false)
  public void testBadGroupCreation() {
    app.goTo().groupPage();
    Groups before=app.group().all();
    GroupData group = new GroupData().withName("test'");
    app.group().create(group);
    assertThat(app.group().count(),equalTo(before.size()));
    Set<GroupData> after=app.group().all();
    System.out.println(before.size());
    System.out.println(after.size());

    assertThat(after, equalTo(before));
  }
}
